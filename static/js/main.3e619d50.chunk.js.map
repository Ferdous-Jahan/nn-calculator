{"version":3,"sources":["Components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","valuesLine","display","alignSelf","values","color","Calculator","useState","selectedDate","setSelectedDate","year","setYear","month","setMonth","days","setDays","separateMonth","setSeparateMonth","separateDays","setSeparateDays","hours","sethours","seconds","setSeconds","miliseconds","setMiliseconds","classes","style","width","textAlign","margin","marginTop","flexDirection","Typography","marginBottom","utils","DateFnsUtils","variant","format","id","label","value","onChange","date","moment","KeyboardButtonProps","Button","onClick","yearThen","parseInt","substring","monthThen","dayThen","today","Date","birthday","differenceInMilisecond","valueOf","year_age","Math","floor","day_age","month_age","tMnt","tDays","disabled","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e619d50.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"date-fns\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  valuesLine: {\r\n    display: \"flex\",\r\n    alignSelf: \"center\",\r\n  },\r\n  values: {\r\n    color: \"#f50057\",\r\n  },\r\n});\r\n\r\nfunction Calculator() {\r\n  const [selectedDate, setSelectedDate] = useState();\r\n  const [year, setYear] = useState();\r\n  const [month, setMonth] = useState();\r\n  const [days, setDays] = useState();\r\n  const [separateMonth, setSeparateMonth] = useState();\r\n  const [separateDays, setSeparateDays] = useState();\r\n  const [hours, sethours] = useState();\r\n  const [seconds, setSeconds] = useState();\r\n  const [miliseconds, setMiliseconds] = useState();\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(moment(date).format(\"YYYY-MM-DD\"));\r\n    //console.log(selectedDate);\r\n  };\r\n\r\n  const calculate = () => {\r\n    var yearThen = parseInt(selectedDate.substring(0, 4), 10);\r\n    var monthThen = parseInt(selectedDate.substring(5, 7), 10);\r\n    var dayThen = parseInt(selectedDate.substring(8, 10), 10);\r\n    var today = new Date();\r\n    var birthday = new Date(yearThen, monthThen - 1, dayThen);\r\n    var differenceInMilisecond = today.valueOf() - birthday.valueOf();\r\n\r\n    var year_age = Math.floor(differenceInMilisecond / 31536000000);\r\n    var day_age = Math.floor((differenceInMilisecond % 31536000000) / 86400000);\r\n\r\n    // if (\r\n    //   today.getMonth() == birthday.getMonth() &&\r\n    //   today.getDate() == birthday.getDate()\r\n    // ) {\r\n    //   alert(\"Happy B'day!!!\");\r\n    // }\r\n\r\n    var month_age = Math.floor(day_age / 30);\r\n\r\n    day_age = day_age % 30;\r\n\r\n    var tMnt = month_age + year_age * 12;\r\n    var tDays = tMnt * 30 + day_age;\r\n    setYear(year_age);\r\n    setMonth(month_age);\r\n    setDays(day_age);\r\n    setSeparateMonth(tMnt);\r\n    setSeparateDays(tDays);\r\n    sethours(tDays * 24);\r\n    setSeconds(tDays * 24 * 3600);\r\n    setMiliseconds(tDays * 24 * 3600 * 1000);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"container\",\r\n        width: \"90%\",\r\n        textAlign: \"center\",\r\n        margin: \"auto\",\r\n        marginTop: \"5rem\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          width: \"50%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          textAlign: \"center\",\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <Typography style={{ marginBottom: \"3rem\" }}>\r\n          Nibba <FavoriteIcon /> Nibbi\r\n        </Typography>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <KeyboardDatePicker\r\n            variant=\"inline\"\r\n            format=\"dd/MM/yyyy\"\r\n            margin=\"normal\"\r\n            id=\"Starting Date\"\r\n            label=\"Starting Date\"\r\n            value={selectedDate}\r\n            onChange={handleDateChange}\r\n            KeyboardButtonProps={{\r\n              \"aria-label\": \"change date\",\r\n            }}\r\n          />\r\n        </MuiPickersUtilsProvider>\r\n        <section style={{ alignSelf: \"center\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={calculate}\r\n            disabled={!selectedDate}\r\n          >\r\n            CALCULATE\r\n          </Button>\r\n        </section>\r\n      </div>\r\n      <div\r\n        style={{\r\n          marginTop: \"5rem\",\r\n          display: miliseconds ? \"flex\" : \"none\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <Typography>You have spent</Typography>\r\n        <Typography className={classes.valuesLine}>\r\n          <Typography className={classes.values}>{year}</Typography>&nbsp;\r\n          years&nbsp;\r\n          <Typography className={classes.values}>{month}</Typography>&nbsp;\r\n          months&nbsp;\r\n          <Typography className={classes.values}>{days}</Typography>&nbsp; days\r\n        </Typography>\r\n        <Typography className={classes.valuesLine}>\r\n          <Typography className={classes.values}>{separateMonth}</Typography>\r\n          &nbsp; months&nbsp;\r\n          <Typography className={classes.values}>{days}</Typography>&nbsp; days\r\n        </Typography>\r\n        <Typography className={classes.valuesLine}>\r\n          <Typography className={classes.values}>{separateDays}</Typography>\r\n          &nbsp; days\r\n        </Typography>\r\n        <Typography className={classes.valuesLine}>\r\n          <Typography className={classes.values}>{hours}</Typography>&nbsp;\r\n          hours\r\n        </Typography>\r\n        <Typography className={classes.valuesLine}>\r\n          <Typography className={classes.values}>{seconds}</Typography>&nbsp;\r\n          seconds\r\n        </Typography>\r\n        <Typography className={classes.valuesLine}>\r\n          <Typography className={classes.values}>{miliseconds}</Typography>\r\n          &nbsp; miliseconds\r\n        </Typography>\r\n        <Typography>With your Nibba/Nibbi</Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport Calculator from \"./Components/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}